{"ast":null,"code":"import axios from \"axios\";\nimport { toastr } from \"react-redux-toastr\";\nimport { FETCH_CONTENT, FETCH_CONTENT_SUCCESS, FETCH_CONTENT_FAILED, OPEN_MODAL, CLOSE_MODAL, UPDATE_CONTENT, UPDATE_CONTENT_SUCCESS, UPDATE_CONTENT_FAILED } from \"./type\";\nexport const fetchContent = () => async dispatch => {\n  dispatch({\n    type: FETCH_CONTENT\n  });\n\n  try {\n    const response = await axios({\n      method: \"get\",\n      url: \"http://localhost:5000/posts/\"\n    });\n    dispatch({\n      type: FETCH_CONTENT_SUCCESS,\n      payload: response.data\n    });\n  } catch (e) {\n    console.log(e);\n    toastr.error(e.response.data.error);\n    dispatch({\n      type: FETCH_CONTENT_FAILED\n    });\n  }\n};\nexport const updateContent = updatedContent => async dispatch => {\n  dispatch({\n    type: UPDATE_CONTENT\n  });\n\n  try {\n    const response = await axios({\n      method: \"patch\",\n      url: `http://localhost:5000/posts/${updatedContent._id}`,\n      data: updatedContent\n    });\n    console.log(response.data);\n    dispatch({\n      type: UPDATE_CONTENT_SUCCESS,\n      payload: {\n        id: updatedContent._id,\n        data: response.data\n      }\n    });\n  } catch (e) {\n    console.log(e);\n    toastr.error(\"Error\", e.response.data.message);\n    dispatch({\n      type: UPDATE_CONTENT_FAILED\n    });\n  }\n};\nexport const handleModal = (open, selected) => async dispatch => {\n  console.log(selected);\n  if (open) dispatch({\n    type: OPEN_MODAL,\n    payload: selected\n  });else dispatch({\n    type: CLOSE_MODAL\n  });\n};","map":{"version":3,"sources":["/Users/veerasudhan/Projects/test-project/task-app-precily/client/src/redux/action/index.js"],"names":["axios","toastr","FETCH_CONTENT","FETCH_CONTENT_SUCCESS","FETCH_CONTENT_FAILED","OPEN_MODAL","CLOSE_MODAL","UPDATE_CONTENT","UPDATE_CONTENT_SUCCESS","UPDATE_CONTENT_FAILED","fetchContent","dispatch","type","response","method","url","payload","data","e","console","log","error","updateContent","updatedContent","_id","id","message","handleModal","open","selected"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,oBAAvB;AAEA,SACEC,aADF,EAEEC,qBAFF,EAGEC,oBAHF,EAIEC,UAJF,EAKEC,WALF,EAMEC,cANF,EAOEC,sBAPF,EAQEC,qBARF,QASO,QATP;AAWA,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACpDA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEV;AAAR,GAAD,CAAR;;AACA,MAAI;AACF,UAAMW,QAAQ,GAAG,MAAMb,KAAK,CAAC;AAC3Bc,MAAAA,MAAM,EAAE,KADmB;AAE3BC,MAAAA,GAAG,EAAE;AAFsB,KAAD,CAA5B;AAIAJ,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAET,qBAAR;AAA+Ba,MAAAA,OAAO,EAAEH,QAAQ,CAACI;AAAjD,KAAD,CAAR;AACD,GAND,CAME,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAjB,IAAAA,MAAM,CAACoB,KAAP,CAAaH,CAAC,CAACL,QAAF,CAAWI,IAAX,CAAgBI,KAA7B;AACAV,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAER;AAAR,KAAD,CAAR;AACD;AACF,CAbM;AAeP,OAAO,MAAMkB,aAAa,GAAIC,cAAD,IAAoB,MAAOZ,QAAP,IAAoB;AACnEA,EAAAA,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEL;AAAR,GAAD,CAAR;;AACA,MAAI;AACF,UAAMM,QAAQ,GAAG,MAAMb,KAAK,CAAC;AAC3Bc,MAAAA,MAAM,EAAE,OADmB;AAE3BC,MAAAA,GAAG,EAAG,+BAA8BQ,cAAc,CAACC,GAAI,EAF5B;AAG3BP,MAAAA,IAAI,EAAEM;AAHqB,KAAD,CAA5B;AAKAJ,IAAAA,OAAO,CAACC,GAAR,CAAYP,QAAQ,CAACI,IAArB;AACAN,IAAAA,QAAQ,CAAC;AACPC,MAAAA,IAAI,EAAEJ,sBADC;AAEPQ,MAAAA,OAAO,EAAE;AACPS,QAAAA,EAAE,EAAEF,cAAc,CAACC,GADZ;AAEPP,QAAAA,IAAI,EAAEJ,QAAQ,CAACI;AAFR;AAFF,KAAD,CAAR;AAOD,GAdD,CAcE,OAAOC,CAAP,EAAU;AACVC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACAjB,IAAAA,MAAM,CAACoB,KAAP,CAAa,OAAb,EAAsBH,CAAC,CAACL,QAAF,CAAWI,IAAX,CAAgBS,OAAtC;AACAf,IAAAA,QAAQ,CAAC;AAAEC,MAAAA,IAAI,EAAEH;AAAR,KAAD,CAAR;AACD;AACF,CArBM;AAuBP,OAAO,MAAMkB,WAAW,GAAG,CAACC,IAAD,EAAOC,QAAP,KAAoB,MAAOlB,QAAP,IAAoB;AACjEQ,EAAAA,OAAO,CAACC,GAAR,CAAYS,QAAZ;AACA,MAAID,IAAJ,EAAUjB,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEP,UAAR;AAAoBW,IAAAA,OAAO,EAAEa;AAA7B,GAAD,CAAR,CAAV,KACKlB,QAAQ,CAAC;AAAEC,IAAAA,IAAI,EAAEN;AAAR,GAAD,CAAR;AACN,CAJM","sourcesContent":["import axios from \"axios\";\nimport { toastr } from \"react-redux-toastr\";\n\nimport {\n  FETCH_CONTENT,\n  FETCH_CONTENT_SUCCESS,\n  FETCH_CONTENT_FAILED,\n  OPEN_MODAL,\n  CLOSE_MODAL,\n  UPDATE_CONTENT,\n  UPDATE_CONTENT_SUCCESS,\n  UPDATE_CONTENT_FAILED,\n} from \"./type\";\n\nexport const fetchContent = () => async (dispatch) => {\n  dispatch({ type: FETCH_CONTENT });\n  try {\n    const response = await axios({\n      method: \"get\",\n      url: \"http://localhost:5000/posts/\",\n    });\n    dispatch({ type: FETCH_CONTENT_SUCCESS, payload: response.data });\n  } catch (e) {\n    console.log(e);\n    toastr.error(e.response.data.error);\n    dispatch({ type: FETCH_CONTENT_FAILED });\n  }\n};\n\nexport const updateContent = (updatedContent) => async (dispatch) => {\n  dispatch({ type: UPDATE_CONTENT });\n  try {\n    const response = await axios({\n      method: \"patch\",\n      url: `http://localhost:5000/posts/${updatedContent._id}`,\n      data: updatedContent,\n    });\n    console.log(response.data);\n    dispatch({\n      type: UPDATE_CONTENT_SUCCESS,\n      payload: {\n        id: updatedContent._id,\n        data: response.data,\n      },\n    });\n  } catch (e) {\n    console.log(e);\n    toastr.error(\"Error\", e.response.data.message);\n    dispatch({ type: UPDATE_CONTENT_FAILED });\n  }\n};\n\nexport const handleModal = (open, selected) => async (dispatch) => {\n  console.log(selected);\n  if (open) dispatch({ type: OPEN_MODAL, payload: selected });\n  else dispatch({ type: CLOSE_MODAL });\n};\n"]},"metadata":{},"sourceType":"module"}